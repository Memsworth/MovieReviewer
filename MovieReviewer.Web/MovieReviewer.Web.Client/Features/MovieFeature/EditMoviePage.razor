@page "/movie/edit/{id:int}"
@inject HttpClient Http
@inject NavigationManager NavMan
@using MovieReviewer.Shared.Core.DTO.Inputs
@using MovieReviewer.Shared.Core.DTO.Outputs
@using MovieReviewer.Shared.Core.Enums
@using MovieReviewer.Shared.Core.Helpers
@using MovieReviewer.Shared.Core.Validation
@rendermode InteractiveAuto

<MudPopoverProvider/>

<PageTitle>Edit a Movie</PageTitle>

@if (_movie is null)
{
    <MudText Typo="Typo.body1" Align="Align.Center" Class="mt-4">Loading movie details...</MudText>
}
else
{
    <MudContainer MaxWidth="MaxWidth.Medium" Class="mt-4">
        <MudText Typo="Typo.h4" Align="Align.Center">Editing @_movie.Title</MudText>
        <MudGrid>
            <MudItem xs="12" sm="7">
                <MudPaper Class="pa-4">
                    <MudForm Model="@_movie" @ref="@_mudForm" Validation="@(_updateValidator.ValidateValue)" ValidationDelay="0">
                        <MudTextField @bind-Text="@_movie!.Title" For="@(() => _movie.Title)" Label="Title"/>

                        <MudTextField @bind-Text="@_movie.Plot" For="@(() => _movie.Plot)" Label="Plot"/>

                        <MudSelect @bind-Value="_movie.MovieLanguage" Label="Movie Language">
                            @foreach (var language in Enum.GetValues(typeof(Language)).Cast<Language>())
                            {
                                <MudSelectItem Value="@language">@language</MudSelectItem>
                            }
                        </MudSelect>

                        <MudSelect @bind-Value="_movie.MovieRating" Label="Movie Language">
                            @foreach (var rating in Enum.GetValues(typeof(RatingSystem)).Cast<RatingSystem>())
                            {
                                <MudSelectItem Value="@rating">@rating</MudSelectItem>
                            }
                        </MudSelect>
                        <MudNumericField @bind-Value="@_movie.ImdbRating" For="@(() => _movie.ImdbRating)" Label="Imdb Rating" Min="1.0" Max="10.0"/>
                        <MudCheckBox @bind-Value = "@_movie.Disabled" Label="Disable"></MudCheckBox>
                    </MudForm>
                </MudPaper>

                <MudPaper Class="pa-4 mt-4">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" DropShadow="false" OnClick="@(async () => await Submit())">Submit</MudButton>
                </MudPaper>
            </MudItem>
        </MudGrid>
    </MudContainer>
}


@code {
    [Parameter] [EditorRequired] public int id { get; set; }
    private UpdateMovieInputModel? _movie { get; set; }
    MudForm _mudForm;
    readonly UpdateMovieInputValidation _updateValidator = new();

    protected override async Task OnInitializedAsync()
    {
        var httpResponse = await Http.GetAsync($"Movie/{id}");
        if (httpResponse.IsSuccessStatusCode)
        {
            var movieView = await httpResponse.Content.ReadFromJsonAsync<MovieViewDTO>();
            _movie = movieView!.ToMovieUpdateInputModel();
        }
    }

    private async Task Submit()
    {
        await _mudForm.Validate();
        if (_mudForm.IsValid)
        {
            await Http.PutAsJsonAsync($"/Movie/{id}", _movie);
            NavMan.NavigateTo("/");
        }
    }

}