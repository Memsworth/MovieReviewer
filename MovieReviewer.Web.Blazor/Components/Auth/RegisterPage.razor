@page "/register"
@using System.ComponentModel.DataAnnotations
@using MovieReviewer.Shared.Dto.Input
@using MovieReviewer.Shared.Service
@using MovieReviewer.Web.Blazor.Models
@using MovieReviewer.Web.Blazor.Services
@inject NavigationManager NavMan
@inject IUserService UserService
<PageTitle>Register User</PageTitle>

<!-- change FormName to match the endpoint I am going to use for the controller -->
<EditForm Model="@registerData" FormName="registering_users" OnValidSubmit="DoSomething">
    <DataAnnotationsValidator />
    <div>
        <FluentTextField Label="First Name" Required @bind-Value="@registerData.FirstName" />
        <ValidationMessage For="@(() => registerData.FirstName)" />
        <FluentTextField Label="Last Name" Required @bind-Value="@registerData.LastName" />
        <ValidationMessage For="@(() => registerData.LastName)" />
        <FluentTextField Label="Email" Required @bind-Value="@registerData.Email" />
        <ValidationMessage For="@(() => registerData.Email)" />
        <FluentTextField Label="Password" Required @bind-Value="@registerData.Password" TextFieldType="TextFieldType.Password" />
        <ValidationMessage For="@(() => registerData.Password)" />
    </div>
    <div>
        <FluentButton Type="ButtonType.Submit">Submit</FluentButton>
    </div>
</EditForm>


@code {
    [SupplyParameterFromForm]
    private RegisterModel registerData { get; set; } = new();

    private async Task DoSomething()
    {
        var result = await UserService.RegisterUser(registerData);

        if (!result.IsSuccess)
        {
            //cause an error here or something
        }
        NavMan.NavigateTo("/", forceLoad: true);
    }
}