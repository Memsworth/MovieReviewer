@page "/login"
@using System.ComponentModel.DataAnnotations
@using MovieReviewer.Shared.Dto.Input
@using MovieReviewer.Shared.Service
@using MovieReviewer.Web.Blazor.Models
@using MovieReviewer.Web.Blazor.Services
@inject NavigationManager NavMan
@inject IAuthService AuthService

<PageTitle>User Login</PageTitle>
<h2>Logging the user in</h2>

<!-- change FormName to match the endpoint I am going to use for the controller -->
<EditForm Model="@loginData" FormName="logging_users" OnValidSubmit="DoSomething">
    <DataAnnotationsValidator />
    <div>
        <FluentTextField Label="Email" Required @bind-Value="@loginData.Email"/>
        <ValidationMessage For="@(() => loginData.Email)"/>
        <FluentTextField Label="Password" Required @bind-Value="@loginData.Password" TextFieldType="TextFieldType.Password"/>
        <ValidationMessage For="@(() => loginData.Password)"/>
    </div>
    <div>
        <FluentButton Type="ButtonType.Submit">Submit</FluentButton>
    </div>
</EditForm>
@code {
    private LoginModel loginData { get; set; } = new();

    public async void DoSomething()
    {
        var resultContainsToken = await AuthService.LoginAsync(loginData);

        if (!resultContainsToken.IsSuccess)
        {
            //Cause an error here
        }

        //Token will be long for url.
        //force user to redirect
        NavMan.NavigateTo($"/cookie-login?token={resultContainsToken.Value}", forceLoad: true);
    }
}
